import telebot
from telebot import types

# Your bot's token
API_TOKEN = '8022466350:AAFLDBUIMDRydgS7WO2GV-fT5r40kBxkuYs'

# Initialize the bot
bot = telebot.TeleBot(API_TOKEN)

# Define the animals and their descriptions
animals = {
    "–ï–Ω–æ—Ç-–ø–æ–ª–æ—Å–∫—É–Ω ü¶ù": {
        "description": "–í—ã –ª—é–±–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
        "image_url": "https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcRcUIZpCqkuD6nHC34GFjTcnc2vQ4qVReakcKpdCFkTuqqohZU8pI3BtOIjWmNHikwCjPamRHJcBzsKbIb7XidNtg"
    },
    "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä üêØ": {
        "description": "–í—ã —Å–∏–ª—å–Ω—ã–π –∏ –≥—Ä–∞—Ü–∏–æ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —Å–∏–º–≤–æ–ª —Ö—Ä–∞–±—Ä–æ—Å—Ç–∏.",
        "image_url": "https://www.zoo-penza.ru/upload/iblock/178/1780045c0b972cef442bcfd5d1eb56be.jpg"
    },
    "–ú–µ–¥–≤–µ–¥—å –±–µ–ª—ã–π üêª‚Äç‚ùÑÔ∏è": {
        "description": "–ú–æ—â–Ω—ã–π, —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π, –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ —Å–∏–ª—ã –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏.",
        "image_url": "https://www.ttelegraf.ru/wp-content/uploads/2021/10/0d027787-74c5-4303-ae3d-de77443084dd-gettyimages-184113999.jpg"
    },
    "–°—É—Ä–∏–∫–∞—Ç ü¶¶": {
        "description": "–í—ã –æ—Ç–ª–∏—á–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫ –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π.",
        "image_url": "https://www.pittsburghzoo.org/wp-content/uploads/2024/03/Mearkat_bubble2.webp"
    },
    "–õ–µ–º—É—Ä –∫–∞—Ç—Ç–∞ üêæ": {
        "description": "–í—ã –∞–∫—Ç–∏–≤–Ω—ã–π –∏ —Å–µ–º–µ–π–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –ª—é–±–∏—Ç–µ –≤–µ—Å–µ–ª—å–µ.",
        "image_url": "https://mountpanther.com/wp-content/uploads/2022/07/lemur1.jpg.webp"
    },
    "–§–µ–Ω–µ–∫ ü¶ä": {
        "description": "–í—ã –±—ã—Å—Ç—Ä—ã–π –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π, –ø–æ–ª–Ω—ã —ç–Ω–µ—Ä–≥–∏–∏.",
        "image_url": "https://otmetka.tv/wp-content/uploads/2018/11/iDXrB6etzNY-848x477.jpg"
    },
    "–ö–∞–ø–∏–±–∞—Ä–∞ ü¶´": {
        "description": "–í—ã —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ª—é–±–∏—Ç–µ –≤–æ–¥—É.",
        "image_url": "https://womenofrussia.online/upload/iblock/363/96vakce82nnh6rrz80803wx93lzsjaee.jpg"
    },
    "–§–ª–∞–º–∏–Ω–≥–æ –∫—Ä–∞—Å–Ω—ã–π ü¶©": {
        "description": "–í—ã —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã –∏ —É—Ç–æ–Ω—á–µ–Ω—ã, —Å–∏–º–≤–æ–ª —Å—Ç—Ä–∞—Å—Ç–∏.",
        "image_url": "https://animalfactguide.com/wp-content/uploads/2023/12/american-flamingo-1-725x575.jpg"                 
    },
    "–°–æ–≤–∞ –±–µ–ª–∞—è ü¶â": {
        "description": "–í—ã –º—É–¥—Ä—ã–π –∏ —Å–ø–æ–∫–æ–π–Ω—ã–π, –ª—é–±–∏—Ç–µ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è.",
        "image_url": "https://yasavey.ru/wp-content/uploads/2020/06/Polyarnaya-sova.jpg"
    },
    "–¢—É–∫–∞–Ω ü¶ú": {
        "description": "–í—ã —è—Ä–∫–∏–π –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π, –ª—é–±–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ.",
        "image_url": "https://www.tierchenwelt.de/images/stories/fotos/voegel/spechte/tukan/tukan_riesentukan_steckbrief_l.jpg"
    },
    "–ö–∞–π–º–∞–Ω–æ–≤–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞ üê¢": {
        "description": "–í—ã —Å–∏–ª—å–Ω—ã –∏ –≤—ã–Ω–æ—Å–ª–∏–≤—ã, –Ω–∞—Å—Ç–æ—è—â–∏–π –æ—Ö—Ä–∞–Ω–Ω–∏–∫.",
        "image_url": "https://fanfishka.ru/uploads/posts/2018-03/thumbs/1521043242_foto1.jpg"
    },
    "–ò–≥—É–∞–Ω–∞ –∑–µ–ª—ë–Ω–∞—è ü¶é": {
        "description": "–í—ã —ç–∫–∑–æ—Ç–∏—á–Ω—ã, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω—ã –∏ —Å–æ–ª–Ω–µ—á–Ω—ã.",
        "image_url": "https://cdn.botanichka.ru/wp-content/uploads/2021/06/zelenaya-iguana-kak-soderzhat-domashnego-drakonchika-01.jpg"
    },
    "–í—ã–¥—Ä–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è ü¶¶": {
        "description": "–í—ã —ç–Ω–µ—Ä–≥–∏—á–Ω—ã –∏ –≤–µ—Å—ë–ª—ã, –ª—é–±–∏—Ç–µ –≤–æ–¥—É.",
        "image_url": "https://paksitanosvenyek.hu/wp-content/uploads/2023/01/vidra.jpg.webp"
    },
    "–ú–æ—Ä—Å–∫–æ–π –∫–æ—Ç–∏–∫ ü¶≠": {
        "description": "–í—ã –∏–≥—Ä–∏–≤—ã, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã –∏ —Å —Å–∏–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.",
        "image_url": "https://anapa.media/wp-content/uploads/2018/05/k2_items_cache_8190821423b6ae5349e76b06feb28cec_XL.jpg"
        }
}

# Define the questions, answers, and their scoring for each animal
questions = [
    {
        "question": "–ì–¥–µ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ?",
        "answers": {
            "üå≤ –í –ª–µ—Å—É": {"–ï–Ω–æ—Ç-–ø–æ–ª–æ—Å–∫—É–Ω ü¶ù": 2, "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä üêØ": 1, "–ú–µ–¥–≤–µ–¥—å –±–µ–ª—ã–π üêª‚Äç‚ùÑÔ∏è": 3, "–°—É—Ä–∏–∫–∞—Ç ü¶¶": 1},
            "üèú –í –ø—É—Å—Ç—ã–Ω–µ": {"–§–µ–Ω–µ–∫ ü¶ä": 3, "–ö–∞–π–º–∞–Ω–æ–≤–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞ üê¢": 1, "–ò–≥—É–∞–Ω–∞ –∑–µ–ª—ë–Ω–∞—è ü¶é": 2, "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä üêØ": 2},
            "üåä –£ –≤–æ–¥—ã": {"–ö–∞–ø–∏–±–∞—Ä–∞ ü¶´": 3, "–í—ã–¥—Ä–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è ü¶¶": 2, "–ú–æ—Ä—Å–∫–æ–π –∫–æ—Ç–∏–∫ ü¶≠": 3},
            "üèû –í –≥–æ—Ä–∞—Ö": {"–°–æ–≤–∞ –±–µ–ª–∞—è ü¶â": 2, "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä üêØ": 3, "–ú–µ–¥–≤–µ–¥—å –±–µ–ª—ã–π üêª‚Äç‚ùÑÔ∏è": 2}
        }
    },
    {
        "question": "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
        "answers": {
            "üõã –õ–µ–Ω–∏–≤–æ –æ—Ç–¥—ã—Ö–∞—è": {"–ò–≥—É–∞–Ω–∞ –∑–µ–ª—ë–Ω–∞—è ü¶é": 3, "–ö–∞–ø–∏–±–∞—Ä–∞ ü¶´": 2, "–°–æ–≤–∞ –±–µ–ª–∞—è ü¶â": 1},
            "üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥—É—è –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞": {"–ï–Ω–æ—Ç-–ø–æ–ª–æ—Å–∫—É–Ω ü¶ù": 3, "–°—É—Ä–∏–∫–∞—Ç ü¶¶": 2, "–§–µ–Ω–µ–∫ ü¶ä": 3},
            "üìö –ó–∞–Ω–∏–º–∞—è—Å—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏": {"–°–æ–≤–∞ –±–µ–ª–∞—è ü¶â": 3, "–¢—É–∫–∞–Ω ü¶ú": 2, "–õ–µ–º—É—Ä –∫–∞—Ç—Ç–∞ üêæ": 1},
            "üë´ –í –∫—Ä—É–≥—É –¥—Ä—É–∑–µ–π –∏ —Å–µ–º—å–∏": {"–õ–µ–º—É—Ä –∫–∞—Ç—Ç–∞ üêæ": 3, "–ö–∞–ø–∏–±–∞—Ä–∞ ü¶´": 2, "–ú–æ—Ä—Å–∫–æ–π –∫–æ—Ç–∏–∫ ü¶≠": 1}
        }
    },
    {
        "question": "–ö–∞–∫–∞—è –µ–¥–∞ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
        "answers": {
            "üçé –§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏": {"–ï–Ω–æ—Ç-–ø–æ–ª–æ—Å–∫—É–Ω ü¶ù": 2, "–õ–µ–º—É—Ä –∫–∞—Ç—Ç–∞ üêæ": 3, "–¢—É–∫–∞–Ω ü¶ú": 2},
            "üçñ –ú—è—Å–æ": {"–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä üêØ": 3, "–ú–µ–¥–≤–µ–¥—å –±–µ–ª—ã–π üêª‚Äç‚ùÑÔ∏è": 2, "–ö–∞–π–º–∞–Ω–æ–≤–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞ üê¢": 1},
            "üåæ –ó–µ—Ä–Ω–æ–≤—ã–µ –∏ –æ—Ä–µ—Ö–∏": {"–ö–∞–ø–∏–±–∞—Ä–∞ ü¶´": 3, "–°—É—Ä–∏–∫–∞—Ç ü¶¶": 2, "–§–µ–Ω–µ–∫ ü¶ä": 1},
            "üç≥ –ß—Ç–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ –∏ —Ä–µ–¥–∫–æ–µ": {"–ò–≥—É–∞–Ω–∞ –∑–µ–ª—ë–Ω–∞—è ü¶é": 3, "–§–ª–∞–º–∏–Ω–≥–æ –∫—Ä–∞—Å–Ω—ã–π ü¶©": 2, "–í—ã–¥—Ä–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è ü¶¶": 1}
        }
    },
    {
        "question": "–ö–∞–∫–æ–π –≤–∞—à –≥–ª–∞–≤–Ω—ã–π —Ç–∞–ª–∞–Ω—Ç?",
        "answers": {
            "ü¶∏‚Äç‚ôÇÔ∏è –ë—ã—Ç—å —Å–∏–ª—å–Ω—ã–º –∏ –∑–∞—â–∏—â–∞—Ç—å": {"–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä üêØ": 3, "–ú–µ–¥–≤–µ–¥—å –±–µ–ª—ã–π üêª‚Äç‚ùÑÔ∏è": 3, "–ö–∞–π–º–∞–Ω–æ–≤–∞—è —á–µ—Ä–µ–ø–∞—Ö–∞ üê¢": 2},
            "üé® –ë—ã—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º": {"–§–ª–∞–º–∏–Ω–≥–æ –∫—Ä–∞—Å–Ω—ã–π ü¶©": 3, "–¢—É–∫–∞–Ω ü¶ú": 2, "–ò–≥—É–∞–Ω–∞ –∑–µ–ª—ë–Ω–∞—è ü¶é": 1},
            "ü§ù –£–º–µ—Ç—å –ª–∞–¥–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏": {"–ö–∞–ø–∏–±–∞—Ä–∞ ü¶´": 3, "–°—É—Ä–∏–∫–∞—Ç ü¶¶": 3, "–ú–æ—Ä—Å–∫–æ–π –∫–æ—Ç–∏–∫ ü¶≠": 2},
            "üßó –ë—ã—Ç—å —É–ø–æ—Ä–Ω—ã–º": {"–°–æ–≤–∞ –±–µ–ª–∞—è ü¶â": 2, "–ê–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä üêØ": 3, "–ï–Ω–æ—Ç-–ø–æ–ª–æ—Å–∫—É–Ω ü¶ù": 1}
        }
    }
]

# Store user data
user_results = {}

# Start command
@bot.message_handler(commands=["start"])
def start(message):
    user_results[message.chat.id] = {"scores": {animal: 0 for animal in animals}, "current_question": 0}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    markup.add(btn)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üêæ –Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ –∑–æ–æ–ø–∞—Ä–∫–∞ —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º —Ç–æ—Ç–µ–º–æ–º. ", reply_markup=markup)

# Handle quiz start
@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
def start_quiz(message):
    ask_question(message.chat.id)

# Ask a question
def ask_question(user_id):
    current_question = user_results[user_id]["current_question"]
    question_data = questions[current_question]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for answer in question_data["answers"].keys():
        markup.add(types.KeyboardButton(answer))
    bot.send_message(user_id, question_data["question"], reply_markup=markup)

# Handle the "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞" button
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")
def restart_quiz(message):
    user_id = message.chat.id
    # Reset the user's progress
    user_results[user_id] = {"scores": {animal: 0 for animal in animals}, "current_question": 0}
    bot.send_message(user_id, "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
    ask_question(user_id)

@bot.message_handler(func=lambda message: message.text == "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏")
def guardianship_info(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –µ–≥–æ –ø–∏—Ç–∞–Ω–∏–µ–º –∏ —É—Ö–æ–¥–æ–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: [–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏](https://moscowzoo.ru/about/guardianship)\n–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!\n+7-499-252-29-51",
        parse_mode="Markdown",
    )


# Handle user answers
@bot.message_handler(func=lambda message: message.chat.id in user_results)
def handle_answer(message):
    user_id = message.chat.id
    current_question = user_results[user_id]["current_question"]
    
    # Check if the user is within the range of questions
    if current_question < len(questions):
        question_data = questions[current_question]
        if message.text in question_data["answers"]:
            # Update scores
            for animal, points in question_data["answers"][message.text].items():
                user_results[user_id]["scores"][animal] += points

            # Move to the next question or finish
            user_results[user_id]["current_question"] += 1
            if user_results[user_id]["current_question"] < len(questions):
                ask_question(user_id)
            else:
                # Calculate the result
                scores = user_results[user_id]["scores"]
                top_animal = max(scores, key=scores.get)
                animal_data = animals[top_animal]
                
                # Send result photo and description
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                restart_button = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")
                info_button = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏")
                markup.add(restart_button, info_button)
                
                bot.send_photo(
                    user_id,
                    photo=animal_data["image_url"],
                    caption=f"–í–∞—à —Ç–æ—Ç–µ–º ‚Äì {top_animal}! {animal_data['description']}",
                    reply_markup=markup
                )
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    else:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'.")

# Run the bot
if __name__ == "__main__":
    bot.polling(none_stop=True)
